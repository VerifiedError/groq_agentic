// This is your Prisma schema file
// Agentic - Standalone AI Chat Application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== USER MODEL ====================

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String?   @unique
  name             String?
  passwordHash     String?   @map("password_hash")

  // User-specific API key (optional - falls back to global if not set)
  apiKey           String?   @map("api_key")

  // Favorite/starred models (JSON array of model IDs)
  favoriteModels   String?   @default("[]") @map("favorite_models")

  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  agenticSessions  AgenticSession[]
  modelPresets     ModelPreset[]

  @@map("users")
}

// ==================== AGENTIC MODELS ====================

model AgenticSession {
  id            String   @id @default(cuid())
  userId        Int      @map("user_id")
  title         String   @default("New Agentic Session")
  model         String   // Model ID (e.g., 'groq/compound')
  settings      String?  // JSON: model settings (temperature, maxTokens, etc.)

  // Cost Tracking
  totalCost     Float    @default(0) @map("total_cost")
  inputTokens   Int      @default(0) @map("input_tokens")
  outputTokens  Int      @default(0) @map("output_tokens")
  cachedTokens  Int      @default(0) @map("cached_tokens")
  messageCount  Int      @default(0) @map("message_count")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      AgenticMessage[]
  artifacts     Artifact[]

  @@index([userId])
  @@map("agentic_sessions")
}

model AgenticMessage {
  id            String   @id @default(cuid())
  sessionId     String   @map("session_id")
  role          String   // 'user' | 'assistant' | 'system'
  content       String   // Message content

  // Cost Tracking (per message)
  cost          Float    @default(0)
  inputTokens   Int      @default(0) @map("input_tokens")
  outputTokens  Int      @default(0) @map("output_tokens")
  cachedTokens  Int      @default(0) @map("cached_tokens")

  // Tool Usage
  toolCalls     String?  @map("tool_calls") // JSON array of tool calls

  // Image/File Attachments
  attachments   String?  // JSON array of image attachments (base64, URL, metadata)

  // Reasoning/Thinking Process
  reasoning     String?  // Model reasoning/thinking process (for reasoning models like DeepSeek-R1, Qwen, GPT-OSS)

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  session       AgenticSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("agentic_messages")
}

// ==================== ARTIFACT MODELS ====================

model Artifact {
  id            String   @id @default(cuid())
  sessionId     String   @map("session_id")

  type          String   // 'react', 'vanilla-js', 'html', 'vue', 'angular'
  title         String
  description   String?

  // Multi-file support: JSON object with filename as key and content as value
  // Example: { "App.js": "...", "styles.css": "...", "utils.js": "..." }
  files         String   // JSON

  // NPM dependencies: JSON object
  // Example: { "three": "^0.150.0", "react-spring": "^9.7.0" }
  dependencies  String?  // JSON (optional)

  // Metadata
  template      String?  // Template used (e.g., 'react-starter', '3d-game')
  isPublic      Boolean  @default(false) @map("is_public") // Future: sharing

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  session       AgenticSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("artifacts")
}

// ==================== GROQ MODELS ====================

model GroqModel {
  id                String   @id // Model ID from Groq API (e.g., 'llama-3.3-70b-versatile')
  displayName       String   @map("display_name") // Human-readable name
  contextWindow     Int      @map("context_window") // Max context length
  inputPricing      Float    @map("input_pricing")  // Cost per 1M input tokens
  outputPricing     Float    @map("output_pricing") // Cost per 1M output tokens
  isVision          Boolean  @default(false) @map("is_vision") // Supports image inputs
  isActive          Boolean  @default(true) @map("is_active") // Available for use

  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("groq_models")
}

// ==================== MODEL PRESETS ====================

model ModelPreset {
  id            String   @id @default(cuid())
  userId        Int      @map("user_id")
  name          String
  description   String?

  // JSON config with all model settings
  // Example: { "temperature": 0.7, "maxTokens": 2000, "topP": 0.9, ... }
  config        String   // JSON

  isGlobal      Boolean  @default(false) @map("is_global")
  isDefault     Boolean  @default(false) @map("is_default")

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("model_presets")
}
